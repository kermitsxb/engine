{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
        "APIRequestContext": {
            "additionalProperties": false,
            "description": "This API is used for the Web API testing. You can use it to trigger API endpoints, configure micro-services,\nprepare environment or the service to your e2e test.\n\nEach Playwright browser context has associated with it {@link APIRequestContext} instance which shares cookie\nstorage with the browser context and can be accessed via\n[browserContext.request](https://playwright.dev/docs/api/class-browsercontext#browser-context-request) or\n[page.request](https://playwright.dev/docs/api/class-page#page-request). It is also possible to create a new\nAPIRequestContext instance manually by calling\n[apiRequest.newContext([options])](https://playwright.dev/docs/api/class-apirequest#api-request-new-context).\n\n**Cookie management**\n\n{@link APIRequestContext} returned by\n[browserContext.request](https://playwright.dev/docs/api/class-browsercontext#browser-context-request) and\n[page.request](https://playwright.dev/docs/api/class-page#page-request) shares cookie storage with the\ncorresponding {@link BrowserContext}. Each API request will have `Cookie` header populated with the values from the\nbrowser context. If the API response contains `Set-Cookie` header it will automatically update {@link * BrowserContext} cookies and requests made from the page will pick them up. This means that if you log in using this\nAPI, your e2e test will be logged in and vice versa.\n\nIf you want API requests to not interfere with the browser cookies you should create a new {@link * APIRequestContext} by calling\n[apiRequest.newContext([options])](https://playwright.dev/docs/api/class-apirequest#api-request-new-context). Such\n`APIRequestContext` object will have its own isolated cookie storage.",
            "type": "object"
        },
        "Accessibility": {
            "additionalProperties": false,
            "description": "The Accessibility class provides methods for inspecting Chromium's accessibility tree. The accessibility tree is\nused by assistive technology such as [screen readers](https://en.wikipedia.org/wiki/Screen_reader) or\n[switches](https://en.wikipedia.org/wiki/Switch_access).\n\nAccessibility is a very platform-specific thing. On different platforms, there are different screen readers that\nmight have wildly different output.\n\nRendering engines of Chromium, Firefox and WebKit have a concept of \"accessibility tree\", which is then translated\ninto different platform-specific APIs. Accessibility namespace gives access to this Accessibility Tree.\n\nMost of the accessibility tree gets filtered out when converting from internal browser AX Tree to Platform-specific\nAX-Tree or by assistive technologies themselves. By default, Playwright tries to approximate this filtering,\nexposing only the \"interesting\" nodes of the tree.",
            "type": "object"
        },
        "Coverage": {
            "additionalProperties": false,
            "description": "Coverage gathers information about parts of JavaScript and CSS that were used by the page.\n\nAn example of using JavaScript coverage to produce Istanbul report for page load:\n\n**NOTE** Coverage APIs are only supported on Chromium-based browsers.\n\n```js\nconst { chromium } = require('playwright');\nconst v8toIstanbul = require('v8-to-istanbul');\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  await page.coverage.startJSCoverage();\n  await page.goto('https://chromium.org');\n  const coverage = await page.coverage.stopJSCoverage();\n  for (const entry of coverage) {\n    const converter = v8toIstanbul('', 0, { source: entry.source });\n    await converter.load();\n    converter.applyCoverage(entry.functions);\n    console.log(JSON.stringify(converter.toIstanbul()));\n  }\n  await browser.close();\n})();\n```",
            "type": "object"
        },
        "Keyboard": {
            "additionalProperties": false,
            "description": "Keyboard provides an api for managing a virtual keyboard. The high level api is\n[keyboard.type(text[, options])](https://playwright.dev/docs/api/class-keyboard#keyboard-type), which takes raw\ncharacters and generates proper `keydown`, `keypress`/`input`, and `keyup` events on your page.\n\nFor finer control, you can use [keyboard.down(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-down),\n[keyboard.up(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-up), and\n[keyboard.insertText(text)](https://playwright.dev/docs/api/class-keyboard#keyboard-insert-text) to manually fire\nevents as if they were generated from a real keyboard.\n\nAn example of holding down `Shift` in order to select and delete some text:\n\n```js\nawait page.keyboard.type('Hello World!');\nawait page.keyboard.press('ArrowLeft');\n\nawait page.keyboard.down('Shift');\nfor (let i = 0; i < ' World'.length; i++)\n  await page.keyboard.press('ArrowLeft');\nawait page.keyboard.up('Shift');\n\nawait page.keyboard.press('Backspace');\n// Result text will end up saying 'Hello!'\n```\n\nAn example of pressing uppercase `A`\n\n```js\nawait page.keyboard.press('Shift+KeyA');\n// or\nawait page.keyboard.press('Shift+A');\n```\n\nAn example to trigger select-all with the keyboard\n\n```js\n// on Windows and Linux\nawait page.keyboard.press('Control+A');\n// on macOS\nawait page.keyboard.press('Meta+A');\n```",
            "type": "object"
        },
        "Mouse": {
            "additionalProperties": false,
            "description": "The Mouse class operates in main-frame CSS pixels relative to the top-left corner of the viewport.\n\nEvery `page` object has its own Mouse, accessible with\n[page.mouse](https://playwright.dev/docs/api/class-page#page-mouse).\n\n```js\n// Using ‘page.mouse’ to trace a 100x100 square.\nawait page.mouse.move(0, 0);\nawait page.mouse.down();\nawait page.mouse.move(0, 100);\nawait page.mouse.move(100, 100);\nawait page.mouse.move(100, 0);\nawait page.mouse.move(0, 0);\nawait page.mouse.up();\n```",
            "type": "object"
        },
        "Touchscreen": {
            "additionalProperties": false,
            "description": "The Touchscreen class operates in main-frame CSS pixels relative to the top-left corner of the viewport. Methods on\nthe touchscreen can only be used in browser contexts that have been initialized with `hasTouch` set to true.",
            "type": "object"
        }
    },
    "description": "- extends: [EventEmitter]\n\nPage provides methods to interact with a single tab in a {@link Browser}, or an\n[extension background page](https://developer.chrome.com/extensions/background_pages) in Chromium. One {@link * Browser} instance might have multiple {@link Page} instances.\n\nThis example creates a page, navigates it to a URL, and then saves a screenshot:\n\n```js\nconst { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.\n\n(async () => {\n  const browser = await webkit.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  await page.goto('https://example.com');\n  await page.screenshot({ path: 'screenshot.png' });\n  await browser.close();\n})();\n```\n\nThe Page class emits various events (described below) which can be handled using any of Node's native\n[`EventEmitter`](https://nodejs.org/api/events.html#events_class_eventemitter) methods, such as `on`, `once` or\n`removeListener`.\n\nThis example logs a message for a single page `load` event:\n\n```js\npage.once('load', () => console.log('Page loaded!'));\n```\n\nTo unsubscribe from events use the `removeListener` method:\n\n```js\nfunction logRequest(interceptedRequest) {\n  console.log('A request was made:', interceptedRequest.url());\n}\npage.on('request', logRequest);\n// Sometime later...\npage.removeListener('request', logRequest);\n```",
    "properties": {
        "accessibility": {
            "$ref": "#/definitions/Accessibility"
        },
        "coverage": {
            "$ref": "#/definitions/Coverage",
            "description": "**NOTE** Only available for Chromium atm.\n\nBrowser-specific Coverage implementation. See {@link Coverage} for more details."
        },
        "keyboard": {
            "$ref": "#/definitions/Keyboard"
        },
        "mouse": {
            "$ref": "#/definitions/Mouse"
        },
        "request": {
            "$ref": "#/definitions/APIRequestContext",
            "description": "API testing helper associated with this page. This method returns the same instance as\n[browserContext.request](https://playwright.dev/docs/api/class-browsercontext#browser-context-request) on the\npage's context. See\n[browserContext.request](https://playwright.dev/docs/api/class-browsercontext#browser-context-request) for more\ndetails."
        },
        "touchscreen": {
            "$ref": "#/definitions/Touchscreen"
        }
    },
    "required": [
        "accessibility",
        "coverage",
        "keyboard",
        "mouse",
        "request",
        "touchscreen"
    ],
    "type": "object"
}


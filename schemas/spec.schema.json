{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
        "Error": {
            "additionalProperties": false,
            "properties": {
                "cause": {},
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "stack": {
                    "type": "string"
                }
            },
            "required": [
                "message",
                "name"
            ],
            "type": "object"
        }
    },
    "description": "The `spec` reporter outputs the test results in a human-readable format.",
    "properties": {
        "allowHalfOpen": {
            "description": "If `false` then the stream will automatically end the writable side when the\nreadable side ends. Set initially by the `allowHalfOpen` constructor option,\nwhich defaults to `true`.\n\nThis can be changed manually to change the half-open behavior of an existing`Duplex` stream instance, but must be changed before the `'end'` event is\nemitted.",
            "type": "boolean"
        },
        "closed": {
            "description": "Is `true` after `'close'` has been emitted.",
            "type": "boolean"
        },
        "destroyed": {
            "description": "Is `true` after `readable.destroy()` has been called.",
            "type": "boolean"
        },
        "errored": {
            "anyOf": [
                {
                    "$ref": "#/definitions/Error"
                },
                {
                    "type": "null"
                }
            ],
            "description": "Returns error if the stream has been destroyed with an error."
        },
        "readable": {
            "description": "Is `true` if it is safe to call `readable.read()`, which means\nthe stream has not been destroyed or emitted `'error'` or `'end'`.",
            "type": "boolean"
        },
        "readableAborted": {
            "description": "Returns whether the stream was destroyed or errored before emitting `'end'`.",
            "type": "boolean"
        },
        "readableDidRead": {
            "description": "Returns whether `'data'` has been emitted.",
            "type": "boolean"
        },
        "readableEncoding": {
            "anyOf": [
                {
                    "enum": [
                        "ascii",
                        "base64",
                        "base64url",
                        "binary",
                        "hex",
                        "latin1",
                        "ucs-2",
                        "ucs2",
                        "utf-16le",
                        "utf-8",
                        "utf16le",
                        "utf8"
                    ],
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ],
            "description": "Getter for the property `encoding` of a given `Readable` stream. The `encoding`property can be set using the `readable.setEncoding()` method."
        },
        "readableEnded": {
            "description": "Becomes `true` when `'end'` event is emitted.",
            "type": "boolean"
        },
        "readableFlowing": {
            "description": "This property reflects the current state of a `Readable` stream as described\nin the `Three states` section.",
            "type": [
                "null",
                "boolean"
            ]
        },
        "readableHighWaterMark": {
            "description": "Returns the value of `highWaterMark` passed when creating this `Readable`.",
            "type": "number"
        },
        "readableLength": {
            "description": "This property contains the number of bytes (or objects) in the queue\nready to be read. The value provides introspection data regarding\nthe status of the `highWaterMark`.",
            "type": "number"
        },
        "readableObjectMode": {
            "description": "Getter for the property `objectMode` of a given `Readable` stream.",
            "type": "boolean"
        },
        "writable": {
            "description": "Is `true` if it is safe to call `writable.write()`, which means\nthe stream has not been destroyed, errored, or ended.",
            "type": "boolean"
        },
        "writableCorked": {
            "description": "Number of times `writable.uncork()` needs to be\ncalled in order to fully uncork the stream.",
            "type": "number"
        },
        "writableEnded": {
            "description": "Is `true` after `writable.end()` has been called. This property\ndoes not indicate whether the data has been flushed, for this use `writable.writableFinished` instead.",
            "type": "boolean"
        },
        "writableFinished": {
            "description": "Is set to `true` immediately before the `'finish'` event is emitted.",
            "type": "boolean"
        },
        "writableHighWaterMark": {
            "description": "Return the value of `highWaterMark` passed when creating this `Writable`.",
            "type": "number"
        },
        "writableLength": {
            "description": "This property contains the number of bytes (or objects) in the queue\nready to be written. The value provides introspection data regarding\nthe status of the `highWaterMark`.",
            "type": "number"
        },
        "writableNeedDrain": {
            "description": "Is `true` if the stream's buffer has been full and stream will emit `'drain'`.",
            "type": "boolean"
        },
        "writableObjectMode": {
            "description": "Getter for the property `objectMode` of a given `Writable` stream.",
            "type": "boolean"
        }
    },
    "required": [
        "allowHalfOpen",
        "closed",
        "destroyed",
        "errored",
        "readable",
        "readableAborted",
        "readableDidRead",
        "readableEncoding",
        "readableEnded",
        "readableFlowing",
        "readableHighWaterMark",
        "readableLength",
        "readableObjectMode",
        "writable",
        "writableCorked",
        "writableEnded",
        "writableFinished",
        "writableHighWaterMark",
        "writableLength",
        "writableNeedDrain",
        "writableObjectMode"
    ],
    "type": "object"
}

